python -m venv venv
    (Create virtual environment)

venv\Scripts\activate.bat
    (Activate Virtual Environment)

uvicorn main:app
    (Host the API on local machine)

uvicorn main:app --reload
    (Host the API on local machine, reload API if any changes detected)




postgres password: superuser
pgAdmin master password: pgAdmin


install Python postgres connector
    pip install psycopg2

postgres docs
    https://www.psycopg.org/docs/usage.html


Pydantic model vs sqlalchemy model:
    Pydantic makes sure the web request data and response data are of a specific structures.
    Sqlalchemy model defines columns of our database table


sqlalchemy:
    pip install sqlalchemy


JWT (JSON Web Token):
    pip install "python-jose[cryptography]"

    for password hashing:
    pip install "passlib[bcrypt]"


alembic: (database migration tool)
    https://www.youtube.com/watch?v=0sOvCWFmrtA&t=37818s
    
    pip install alembic
    # initialize alembic
        alembic init <directory>
            set target_metada in env.py file
            set config.set_main_option("sqlalchemy.url", <value>) in env.py file

    # create a revision file
        alembic revision 
            define upgrade and downgrade functions
    
    # Upgrade to a revision
        alembic upgrade <revision_no>

        alembic upgrade head # upgrades to the latest revision


        alembic current


    documentaion:> API details > DDL internals



CORS (Cross ORigin Resource Sharing):
    middleware
    

Heroku
    https://devcenter.heroku.com/articles/getting-started-with-python
    
    heroku ps:restart
    heroku logs -t
    heroku apps:info <app name>
    heroku run alembic upgrade head

    # to make changes to application
    git add --all
    git commit -m "commit message"
    git push heroku main

    https://fastapi-sample-application.herokuapp.com/


Ubuntu server:
    Create an ubuntu server
    ssh into it 
        ssh user1@192.168.0.106
    update packages
        sudo apt update && sudo apt upgrade -y
    check/install python
        python3 --version
        sudo apt install python
    check/install pip3
        pip3 --version
        sudo apt-get install python3-pip
    install virtualenv
        sudo pip3 install virtualenv
    install postgres
        sudo apt install postgresql postgresql-contrib
    setup to postgres user
        sudo passwd postgres
            <set postgres user password>
        su - postgres
            <enter postgres user password>
        psql -U postgres
        \password postgres
            <set postgres user password>
        \q
        exit
    Configure postgres
        cd /etc/postgresql/14/main
        sudo vi postgresql.conf
            <change listen_addresses to your ip or '*' for all ip>
        sudo vi pg_hba.conf
            <change all login method to md5, ie for local, and host: ipv4, ipv6>
            <change ipv4 and ipv6 to support all connections 0.0.0.0/0 and ::/0>
    restart postgres
        systemctl restart postgresql
    create a user (best practice to not use root user all the time)
        adduser <username>
        (login as root to give root privilages to <username>)
            (to unlock root user: sudo passwd root)
        usermod -aG sudo <username>
            (check root privilage with sudo apt upgrade command)

    ssh as the new user
        ssh <username>@<ip>
    create a new folder
        mkdir <foldername>
    create an virtualenv
        virtualenv venv
            activate virtual environment
                source venv/bin/activate
            to get out of venv
                deactivate
    clreate an src folder
        mkdir src
    clone git repo to this folder 
        git clone <repo https url> .
    acivate venv
    install python packages
        pip install -r requirements.txt 
            (solution to possible error:
                deactivate venv
                sudo apt-get install libpq-dev
                sudo apt-get install libffi-dev )
    set environment variables
        export <ENV_VARIABLE> = <value>
        printenv (to see all env variables)
        unset <ENV_VARIABLE>  ( to remove env variable)
        .. to set multiple env variables, add all variables to a file and execute:
            set -o allexport; source <filename>; set +o allexport
        to make the ev variables persist after reboot,
        paste the above command at the end of .profile file 
    Create an postgres database from pgAdmin
    generate all the tables with alembic
        alembic upgrade head
    start the application
        uvicorn --host 192.168.0.106  app.main:app

    To make the application auto restart after VM reboot or crash, we are using process manager gunicorn
        pip install gunicorn
        pip install httptools
        pip install uvloop

            we can specify no. of workers with gunicorn
        gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 192.168.0.106:8000
        
        create a gunicorn service
        create a servicefile in etc/systemd/system  (fastapi.service)
        start the service  
            systemctl start fastapi
        Enable autostart for this service
            sudo systemctl enable fastapi

    setup nginx
        sudo apt install nginx
        systemctl start nginx
        cd /etc/nginx/sites-available
        .. edit default file to redirect to gunicorn
            "location / {
                proxy_pass http://localhost:8000;
                        proxy_http_version 1.1;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection 'upgrade';
                        proxy_set_header Host $http_host;
                        proxy_set_header X-NginX-Proxy true;
                        proxy_redirect off;
            }"
        systemctl restart nginx

    To serve https requests:
        1. Create a Domain name
        2. Configure DNS to direct to ypur VM
        3. Use Certbot to get an ssl certificates setup for your system

    Set firewall rules
        sudo ufw allow http
        sudo ufw allow https
        sudo ufw allow ssh
        sudo ufw allow 5432  (not recommended, to access postgres from outside)
        sudo ufw enable

        sudo ufw status

        sudo ufw delete allow 5432  (to deleta a rule)



course status:
    https://youtu.be/0sOvCWFmrtA?t=43553



ubuntu server:
    username: user1
    password 1234